'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

class ExtWebpackPlugin {
  constructor(options) {
    this.plugin = require(`./pluginUtil`)._constructor(options);
  }

  apply(compiler) {
    require('./pluginUtil').logv(this.plugin.options, 'FUNCTION apply');

    if (compiler.hooks) {
      compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
        require('./pluginUtil').logv(this.plugin.options, 'HOOK thisCompilation');

        if (this.plugin.vars.pluginErrors.length > 0) {
          compilation.errors.push(new Error(this.plugin.vars.pluginErrors.join("")));
        } else {//this.plugin.vars.deps = []
        }
      });

      if (this.plugin.vars.pluginErrors.length > 0) {
        return;
      }

      if (this.plugin.vars.framework == 'extjs') {
        compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
          require('./pluginUtil').logv(this.plugin.options, 'HOOK afterCompile');

          require(`./extjsUtil`)._afterCompile(compilation, this.plugin.vars, this.plugin.options);
        });
      } else {
        compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
          require('./pluginUtil').logv(this.plugin.options, 'HOOK compilation');

          require(`./pluginUtil`)._compilation(compiler, compilation, this.plugin.vars, this.plugin.options);
        });
      }

      compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
        require('./pluginUtil').logv(this.plugin.options, 'HOOK emit');

        require(`./pluginUtil`).emit(compiler, compilation, this.plugin.vars, this.plugin.options, callback);
      });
      compiler.hooks.done.tap(`ext-done`, () => {
        require('./pluginUtil').logv(this.plugin.options, 'HOOK done');

        require('./pluginUtil').log(this.plugin.vars.app + `Completed ext-webpack-plugin processing`);
      });
    } else {
      console.log('not webpack 4');
    }
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRXh0V2VicGFja1BsdWdpbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInBsdWdpbiIsIl9jb25zdHJ1Y3RvciIsImFwcGx5IiwiY29tcGlsZXIiLCJsb2d2IiwiaG9va3MiLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsInZhcnMiLCJwbHVnaW5FcnJvcnMiLCJsZW5ndGgiLCJlcnJvcnMiLCJwdXNoIiwiRXJyb3IiLCJqb2luIiwiZnJhbWV3b3JrIiwiYWZ0ZXJDb21waWxlIiwiX2FmdGVyQ29tcGlsZSIsIl9jb21waWxhdGlvbiIsImVtaXQiLCJ0YXBBc3luYyIsImNhbGxiYWNrIiwiZG9uZSIsImxvZyIsImFwcCIsImNvbnNvbGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBQ0FBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUVlLE1BQU1DLGdCQUFOLENBQXVCO0FBQ3BDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQixTQUFLQyxNQUFMLEdBQWNKLE9BQU8sQ0FBRSxjQUFGLENBQVAsQ0FBd0JLLFlBQXhCLENBQXFDRixPQUFyQyxDQUFkO0FBQ0Q7O0FBQ0RHLEVBQUFBLEtBQUssQ0FBQ0MsUUFBRCxFQUFXO0FBQ2RQLElBQUFBLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JRLElBQXhCLENBQTZCLEtBQUtKLE1BQUwsQ0FBWUQsT0FBekMsRUFBaUQsZ0JBQWpEOztBQUNBLFFBQUlJLFFBQVEsQ0FBQ0UsS0FBYixFQUFvQjtBQUVsQkYsTUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVDLGVBQWYsQ0FBK0JDLEdBQS9CLENBQW9DLHNCQUFwQyxFQUE0REMsV0FBRCxJQUFpQjtBQUMxRVosUUFBQUEsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QlEsSUFBeEIsQ0FBNkIsS0FBS0osTUFBTCxDQUFZRCxPQUF6QyxFQUFpRCxzQkFBakQ7O0FBQ0EsWUFBSSxLQUFLQyxNQUFMLENBQVlTLElBQVosQ0FBaUJDLFlBQWpCLENBQThCQyxNQUE5QixHQUF1QyxDQUEzQyxFQUE4QztBQUM1Q0gsVUFBQUEsV0FBVyxDQUFDSSxNQUFaLENBQW1CQyxJQUFuQixDQUF5QixJQUFJQyxLQUFKLENBQVUsS0FBS2QsTUFBTCxDQUFZUyxJQUFaLENBQWlCQyxZQUFqQixDQUE4QkssSUFBOUIsQ0FBbUMsRUFBbkMsQ0FBVixDQUF6QjtBQUNELFNBRkQsTUFHSyxDQUNIO0FBQ0Q7QUFDRixPQVJEOztBQVVBLFVBQUksS0FBS2YsTUFBTCxDQUFZUyxJQUFaLENBQWlCQyxZQUFqQixDQUE4QkMsTUFBOUIsR0FBdUMsQ0FBM0MsRUFBOEM7QUFDNUM7QUFDRDs7QUFFRCxVQUFLLEtBQUtYLE1BQUwsQ0FBWVMsSUFBWixDQUFpQk8sU0FBakIsSUFBOEIsT0FBbkMsRUFBNEM7QUFDMUNiLFFBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlWSxZQUFmLENBQTRCVixHQUE1QixDQUFnQyxtQkFBaEMsRUFBc0RDLFdBQUQsSUFBaUI7QUFDcEVaLFVBQUFBLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JRLElBQXhCLENBQTZCLEtBQUtKLE1BQUwsQ0FBWUQsT0FBekMsRUFBaUQsbUJBQWpEOztBQUNBSCxVQUFBQSxPQUFPLENBQUUsYUFBRixDQUFQLENBQXVCc0IsYUFBdkIsQ0FBcUNWLFdBQXJDLEVBQWtELEtBQUtSLE1BQUwsQ0FBWVMsSUFBOUQsRUFBb0UsS0FBS1QsTUFBTCxDQUFZRCxPQUFoRjtBQUNELFNBSEQ7QUFJRCxPQUxELE1BTUs7QUFDSEksUUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVHLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRVosVUFBQUEsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QlEsSUFBeEIsQ0FBNkIsS0FBS0osTUFBTCxDQUFZRCxPQUF6QyxFQUFpRCxrQkFBakQ7O0FBQ0FILFVBQUFBLE9BQU8sQ0FBRSxjQUFGLENBQVAsQ0FBd0J1QixZQUF4QixDQUFxQ2hCLFFBQXJDLEVBQStDSyxXQUEvQyxFQUE0RCxLQUFLUixNQUFMLENBQVlTLElBQXhFLEVBQThFLEtBQUtULE1BQUwsQ0FBWUQsT0FBMUY7QUFDRCxTQUhEO0FBSUQ7O0FBRURJLE1BQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlZSxJQUFmLENBQW9CQyxRQUFwQixDQUE4QixVQUE5QixFQUF5QyxDQUFDYixXQUFELEVBQWNjLFFBQWQsS0FBMkI7QUFDbEUxQixRQUFBQSxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCUSxJQUF4QixDQUE2QixLQUFLSixNQUFMLENBQVlELE9BQXpDLEVBQWlELFdBQWpEOztBQUNBSCxRQUFBQSxPQUFPLENBQUUsY0FBRixDQUFQLENBQXdCd0IsSUFBeEIsQ0FBNkJqQixRQUE3QixFQUF1Q0ssV0FBdkMsRUFBb0QsS0FBS1IsTUFBTCxDQUFZUyxJQUFoRSxFQUFzRSxLQUFLVCxNQUFMLENBQVlELE9BQWxGLEVBQTJGdUIsUUFBM0Y7QUFDRCxPQUhEO0FBS0FuQixNQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZWtCLElBQWYsQ0FBb0JoQixHQUFwQixDQUF5QixVQUF6QixFQUFvQyxNQUFNO0FBQ3hDWCxRQUFBQSxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCUSxJQUF4QixDQUE2QixLQUFLSixNQUFMLENBQVlELE9BQXpDLEVBQWlELFdBQWpEOztBQUNBSCxRQUFBQSxPQUFPLENBQUMsY0FBRCxDQUFQLENBQXdCNEIsR0FBeEIsQ0FBNEIsS0FBS3hCLE1BQUwsQ0FBWVMsSUFBWixDQUFpQmdCLEdBQWpCLEdBQXdCLHlDQUFwRDtBQUNELE9BSEQ7QUFLRCxLQXZDRCxNQXdDSztBQUFDQyxNQUFBQSxPQUFPLENBQUNGLEdBQVIsQ0FBWSxlQUFaO0FBQTZCO0FBQ3BDOztBQS9DbUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnJlcXVpcmUoJ0BiYWJlbC9wb2x5ZmlsbCcpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4dFdlYnBhY2tQbHVnaW4ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5wbHVnaW4gPSByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fY29uc3RydWN0b3Iob3B0aW9ucylcbiAgfVxuICBhcHBseShjb21waWxlcikge1xuICAgIHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZ3YodGhpcy5wbHVnaW4ub3B0aW9ucywnRlVOQ1RJT04gYXBwbHknKVxuICAgIGlmIChjb21waWxlci5ob29rcykge1xuXG4gICAgICBjb21waWxlci5ob29rcy50aGlzQ29tcGlsYXRpb24udGFwKGBleHQtdGhpcy1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2d2KHRoaXMucGx1Z2luLm9wdGlvbnMsJ0hPT0sgdGhpc0NvbXBpbGF0aW9uJylcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnZhcnMucGx1Z2luRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHRoaXMucGx1Z2luLnZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvL3RoaXMucGx1Z2luLnZhcnMuZGVwcyA9IFtdXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmICh0aGlzLnBsdWdpbi52YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIHRoaXMucGx1Z2luLnZhcnMuZnJhbWV3b3JrID09ICdleHRqcycpIHtcbiAgICAgICAgY29tcGlsZXIuaG9va3MuYWZ0ZXJDb21waWxlLnRhcCgnZXh0LWFmdGVyLWNvbXBpbGUnLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2d2KHRoaXMucGx1Z2luLm9wdGlvbnMsJ0hPT0sgYWZ0ZXJDb21waWxlJylcbiAgICAgICAgICByZXF1aXJlKGAuL2V4dGpzVXRpbGApLl9hZnRlckNvbXBpbGUoY29tcGlsYXRpb24sIHRoaXMucGx1Z2luLnZhcnMsIHRoaXMucGx1Z2luLm9wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29tcGlsZXIuaG9va3MuY29tcGlsYXRpb24udGFwKGBleHQtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2d2KHRoaXMucGx1Z2luLm9wdGlvbnMsJ0hPT0sgY29tcGlsYXRpb24nKVxuICAgICAgICAgIHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHRoaXMucGx1Z2luLnZhcnMsIHRoaXMucGx1Z2luLm9wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2d2KHRoaXMucGx1Z2luLm9wdGlvbnMsJ0hPT0sgZW1pdCcpXG4gICAgICAgIHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLmVtaXQoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB0aGlzLnBsdWdpbi52YXJzLCB0aGlzLnBsdWdpbi5vcHRpb25zLCBjYWxsYmFjaylcbiAgICAgIH0pXG5cbiAgICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsICgpID0+IHtcbiAgICAgICAgcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9ndih0aGlzLnBsdWdpbi5vcHRpb25zLCdIT09LIGRvbmUnKVxuICAgICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2codGhpcy5wbHVnaW4udmFycy5hcHAgKyBgQ29tcGxldGVkIGV4dC13ZWJwYWNrLXBsdWdpbiBwcm9jZXNzaW5nYClcbiAgICAgIH0pXG5cbiAgICB9XG4gICAgZWxzZSB7Y29uc29sZS5sb2coJ25vdCB3ZWJwYWNrIDQnKX1cbiAgfVxufVxuIl19